plugins {
	id 'org.springframework.boot' version '2.1.4.RELEASE'
	id 'java'
	id 'jacoco'
    id 'com.github.hierynomus.license' version '0.15.0'
}

apply plugin: 'io.spring.dependency-management'

group = 'org.zowe.sample'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

ext {
    zoweApimlVersion = '1.1.2'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
    mavenLocal()
    maven {
        url zoweArtifactoryRepository
        credentials {
            username zoweArtifactoryUser
            password zoweArtifactoryPassword
        }
    }
    // TODO: Remove when the library is on JCenter
	maven {
		url  "https://dl.bintray.com/plavjanik/zowe"
	}
    jcenter()
    mavenCentral()
}

def commonsProject = { ->
        try {
            return project(':zowe-rest-api-commons-spring')
        } catch (ignored) {
            return 'org.zowe:zowe-rest-api-commons-spring:0.0.13'
        }
    }

dependencies {
    implementation commonsProject()
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation "com.ca.mfaas.sdk:mfaas-integration-enabler-java:$zoweApimlVersion"
    implementation "com.ca.mfaas.sdk:mfaas-common-service-core:$zoweApimlVersion"
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

jacoco {
    toolVersion = '0.8.3'
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
    doLast {
        println "JaCoCo Test report written to: ${jacocoTestReport.reports.html.destination}/index.html"
    }
}

jacocoTestReport.dependsOn test

check.dependsOn jacocoTestReport

license {
    header rootProject.file('.licence/EPL-2.0-licence-header.txt')
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    excludes(["**/*.yml", "**/*.json", "**/*.sh", "**/*.txt", "**/*.p12", "**/*.xml", "**/*.jsp", "**/*.html", "**/*.jks"])
    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

bootRun {
	args '--spring.config.additional-location=file:./config/local/application.yml'
}
